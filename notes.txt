TODO:

    documentation comments

    Login - 
      User enters username √
      User enters password √
      User enters privateKey (or it is loaded from local storage if it exists) √
      User clicks "Submit" √
      Send username and password hash to server √
      Server checks for existence of username √
      Server checks password hash against the existing user with that username √
      Server generates random session key for the user, returns it and the user's public key, and tells the user they are logged in √
      Client saves session key. Also save current username in local storage. √
      => Home

    Logout
      User clicks "Logout" √
      Client sets localStorage['isLogged'in] to 'false' √
      Client navigates to Login √
      Client updates menu bar to reflect signin status √

    Register - User clicks on "Register" and enters information to create an account. Then login.
      User enters username √
      User enters password √
      Client creates public and private keys √
      Send username, H(password), and public key to Server √
      Save private key in local storage and inform the user that they need to save it √
      -> Login

    View list of conversations - User navigates to Home and sees a list of conversations for the current user
      User is signed in √
      User clicks on "Home" if not there already √
      Client submits access request with username and session key v
      Server checks the session key against the username (Don't trust the client saying it is logged in) v
      If logged in, Server admits the request and returns the list of conversations which contains. Else, return error v
      Client displays the conversations to the user v

    Start view of messages in a conversation - User clicks on an active conversation from Home and sees all messages in that conversation
      User is signed in and at Home, viewing a list of conversations v
      User clicks on a conversation v
      -> View messages in a conversation
      
    View messages in a conversation
      Client requests all User decryptable messages under the current conversationID v
      Server validates request v
      Server returns all User decryptable messages under the current conversationID v
      Client decrypts all User decryptable messages v
      Client displays messages in a nice format v

      (conversation also stores the participants' public keys)

    Create a new conversation - User clicks on "New Conversation" and starts communicating with another user
      User is signed in v
      User clicks on "Home" if not there already v
      User clicks on "New Conversation" v
      User enters a recipient username v
      Client sends username to Server v
      Server checks if the username matches an existing user. If not, notify Client of the error. v
      Server creates new empty conversation and saves it v
      Server sends empty conversation with the public keys of both Users v
      Client displays empty conversation v

    Create a new message -
      User is signed in and viewing a conversation v
      User enters message body v
      User clicks "Send" v
      Client creates message {timestamp, User's username, Other User's username, message body} v
      Client creates User decryptable message with User's public key v
      Client creates Other User decryptable message with Other User's public key v
      Client creates request {conversationID, User decryptable message, Other User decryptable message} v
      Client creates signedRequest {S(request, User's private key)} (Get basic encryption/decryption working first...) ___
      Client sends request, (signedRequest), username, and session key v
      Server validates requestv
      Server stores the User decryptable message and Other User decryptable message separately under the conversation ID v
      User clicks "Refresh" v
      -> View messages in a conversation

    TODO later:

      Timeout user account after inactivity
      Display Login or Register on the titlebar (only one at a time) v
      Optimize conversation view by only requesting messages that the client does not have v

    -Security Requirements
      Sender encrypts and signs message using RSA keys.
      Server and Receiver verify tag of messages and the Sender.
      Require valid (matching) session key in all requests